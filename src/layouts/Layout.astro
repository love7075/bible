---
import { versionInfo, bookMap } from "../lib/bibledata";

interface Props {
	title?: string;
}

const { title = "圣经阅读" } = Astro.props;
---

<!doctype html>
<html lang="zh">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<nav class="bg-white shadow-lg">
			<div class="max-w-7xl mx-auto px-4">
				<div class="flex justify-between h-16">
					<div class="flex">
						<div class="flex-shrink-0 flex items-center">
							<a href="/" class="text-xl font-bold text-gray-800">圣经阅读</a>
						</div>
						<div class="hidden sm:ml-6 sm:flex sm:space-x-8">
							<a href="/" class="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium">
								首页
							</a>
						 
							{
								Object.entries(versionInfo).map(([key, value]) => (
									<a href={`/${key}`} class="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium">{value}</a>
								))
							}
							<a href="/parallel" class="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium">
								平行阅读
							</a>
							<a href="/translate" class="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium">翻译</a>
						</div>
					</div>
					<div class="hidden sm:ml-6 sm:flex sm:items-center">
						<div id="userInfo" class="hidden">
							<span id="username" class="text-gray-700 mr-4"></span>
							<button id="logoutBtn" class="text-gray-500 hover:text-gray-700">退出</button>
						</div>
						<div id="loginBtn" class="text-gray-500 hover:text-gray-700 cursor-pointer">
							登录
						</div>
					</div>
				</div>
			</div>
		</nav>

		<div class="page-container">
			<div class="content-content">
				<slot />
			</div>
		</div>
		<div class="footer">2025</div>
	</body>
</html>

<script>
	// 检查登录状态
	function checkAuth() {
		const token = localStorage.getItem('token');
		const user = JSON.parse(localStorage.getItem('user') || 'null');
		const userInfo = document.getElementById('userInfo');
		const loginBtn = document.getElementById('loginBtn');
		const username = document.getElementById('username');

		if (token && user) {
			userInfo?.classList.remove('hidden');
			loginBtn?.classList.add('hidden');
			if (username) {
				username.textContent = user.username;
			}
		} else {
			userInfo?.classList.add('hidden');
			loginBtn?.classList.remove('hidden');
		}
	}

	// 登录按钮点击事件
	document.getElementById('loginBtn')?.addEventListener('click', () => {
		window.location.href = '/login';
	});

	// 退出按钮点击事件
	document.getElementById('logoutBtn')?.addEventListener('click', () => {
		localStorage.removeItem('token');
		localStorage.removeItem('user');
		checkAuth();
		window.location.href = '/';
	});

	// 页面加载时检查登录状态
	window.addEventListener('DOMContentLoaded', checkAuth);
</script>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}
	.page-container {
		display: flex;
		flex-direction: column;
		min-height: 90vh; /* 确保至少占满整个视口高度 */
	}
	/* 主要内容区域 */
	.main-content {
		flex: 1; /* 关键：让主内容区域占据剩余空间 */
		padding: 2rem;
		background: linear-gradient(45deg, #f8f9fa, #e9ecef);
	}

	/* Footer样式 */
	.footer {
		/* background: #343a40;
            color: white; */
		padding: 2rem;
		text-align: center;
		margin-top: auto; /* 确保footer始终在底部 */
	}
</style>
